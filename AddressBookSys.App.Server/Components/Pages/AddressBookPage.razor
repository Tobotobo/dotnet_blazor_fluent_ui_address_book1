@page "/addressbook"
@rendermode InteractiveServer
@inject IAddressBookService addressBookService
@inject IDialogService dialogService

<PageTitle>アドレス帳</PageTitle>

<h1>アドレス帳</h1>

<FluentButton IconStart="@(new Icons.Regular.Size16.New())" Appearance="Appearance.Accent" @onclick="NewAddressBook">新規</FluentButton>

<FluentDataGrid @ref="addressBooksDataGrid" ItemsProvider="@addressBooksProvider" Pagination="@pagination">
    <PropertyColumn Title="ID" Property="@(x => x.Id)" Align="Align.Start"/>
    <PropertyColumn Title="名前" Property="@(x => x.Name)" Align="Align.Start"/>
    <PropertyColumn Title="メールアドレス" Property="@(x => x.Mail)" Align="Align.Start"/>
    <TemplateColumn Title="操作" Align="@Align.End">
        <FluentButton IconStart="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => UpdateAddressBook(context))">変更</FluentButton>
        <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => RemoveAddressBook(context))">削除</FluentButton>
    </TemplateColumn>
</FluentDataGrid>

<FluentPaginator State="@pagination" />

@code {
    private FluentDataGrid<AddressBook> addressBooksDataGrid = default!;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private GridItemsProvider<AddressBook> addressBooksProvider = default!;
    
    protected override async Task OnInitializedAsync()
    {
        addressBooksProvider = async req =>
        {
            var addressBooks = await addressBookService.GetAddressBooks(skip: req.StartIndex, limit: req.Count ?? 0);
            return GridItemsProviderResult.From(
                items: addressBooks.ToList(),
                totalItemCount: await addressBookService.CountAddressBooks());
        };
    }

    private async Task NewAddressBook() {
        DialogParameters parameters = new()
        {
            Title = $"登録",
            PrimaryAction = "登録",
            SecondaryAction = "キャンセル",
            PreventScroll = true 
        };
        var dialog = await dialogService.ShowDialogAsync<AddressBookRegisterDialog>(new DialogData<AddressBook>(), parameters);
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }
        
        var addressBook = (result.Data as DialogData<AddressBook>)!.Value!;
        await addressBookService.AddAddressBook(addressBook);
        await addressBooksDataGrid.RefreshDataAsync();
    }

    private async Task UpdateAddressBook(AddressBook addressBook) {
        DialogParameters parameters = new()
        {
            Title = $"更新",
            PrimaryAction = "更新",
            SecondaryAction = "キャンセル",
            PreventScroll = true 
        };
        var dialog = await dialogService.ShowDialogAsync<AddressBookUpdateDialog>(new DialogData<AddressBook>() { Value = addressBook }, parameters);
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }
        
        var newAddressBook = (result.Data as DialogData<AddressBook>)!.Value!;
        await addressBookService.UpdateAddressBook(newAddressBook);
        await addressBooksDataGrid.RefreshDataAsync();
    }

    private async Task RemoveAddressBook(AddressBook addressBook) {

        var dialog = await dialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>()
           {
                Content = new()
                {
                    Title = "削除",
                    Message = $"{addressBook.Id}:{addressBook.Name} を削除します。よろしいですか？",
                    Icon = new Icons.Regular.Size24.Warning(),
                    IconColor = Color.Warning,
                },
                PrimaryAction = "はい",
                SecondaryAction = "いいえ",
            });
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }

        await addressBookService.RemoveAddressBook(addressBook);
        await addressBooksDataGrid.RefreshDataAsync();
    }
}
