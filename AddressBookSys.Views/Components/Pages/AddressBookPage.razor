@page "/addressbook"
@rendermode @(Settings.RenderMode)
@inject IAddressBookService addressBookService
@inject IDialogService dialogService
@inject IToastService ToastService

<PageTitle>アドレス帳</PageTitle>

<div style="display: flex; flex-direction: column; height: 100%;">

    @* 上部※高さ固定 *@
    <div style="flex: 0 1 auto;">
        <h1>アドレス帳</h1>

        <FluentStack style="padding-bottom: 0.5rem;">
            @* 新規 *@
            <FluentButton IconStart="@(new Icons.Regular.Size16.New())" Appearance="Appearance.Accent" @onclick="NewAddressBook">新規</FluentButton>
            <FluentSpacer />
            @* 検索 *@
            <FluentTextField Label="名前:" @bind-Value="NameFilter" />
            <FluentTextField Label="メールアドレス:" @bind-Value="MailFilter" TextFieldType="TextFieldType.Email" Spellcheck="true" />
            <FluentButton IconStart="@(new Icons.Regular.Size20.Search())" OnClick="@SearchAddressBooks" Appearance="Appearance.Accent">検索</FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size20.Eraser())" OnClick="@ClearFilter">クリア</FluentButton>
        </FluentStack>
    </div>

    <div style="flex: 1 1 auto; overflow: auto;">

        @* ページネーション *@
        @* <FluentDataGrid @ref="addressBooksDataGrid" ItemsProvider="@addressBooksProvider" Pagination="@pagination">
            <PropertyColumn Title="ID" Property="@(x => x.Id)" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn=true Sortable="true" Align="Align.Start"/>
            <PropertyColumn Title="名前" Property="@(x => x.Name)" Align="Align.Start"/>
            <PropertyColumn Title="メールアドレス" Property="@(x => x.Mail)" Align="Align.Start"/>
            <TemplateColumn Title="操作" Align="@Align.End">
                <FluentButton IconStart="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => UpdateAddressBook(context))">変更</FluentButton>
                <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => RemoveAddressBook(context))">削除</FluentButton>
            </TemplateColumn>
        </FluentDataGrid>
        <FluentPaginator State="@pagination" /> *@

        @* 無限スクロール *@
        <FluentDataGrid @ref="addressBooksDataGrid" ItemsProvider="@addressBooksProvider" Virtualize="true" GenerateHeader="GenerateHeaderOption.Sticky" ItemSize="48">
            <PropertyColumn Title="ID" Property="@(x => x.Id)" Width="0.5fr" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn=true Sortable="true" Align="Align.Start"/>
            <PropertyColumn Title="名前" Property="@(x => x.Name)" Width="1fr" Align="Align.Start"/>
            <PropertyColumn Title="メールアドレス" Property="@(x => x.Mail)" Width="2fr" Align="Align.Start"/>
            <TemplateColumn Title="操作" Align="@Align.End">
                <FluentButton IconStart="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => UpdateAddressBook(context))">変更</FluentButton>
                <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => RemoveAddressBook(context))">削除</FluentButton>
            </TemplateColumn>
        </FluentDataGrid>
    </div>

    @* 下部※高さ固定 *@
    <div style="flex: 0 1 auto;">
        <FluentLabel style="padding-top: 0.5rem"><b>@Count</b> items</FluentLabel>
    </div>

</div>

@code {
    private FluentDataGrid<AddressBook> addressBooksDataGrid = default!;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private GridItemsProvider<AddressBook> addressBooksProvider = default!;
    private string? NameFilter { get; set; }
    private string? MailFilter { get; set; }

    private int Count { get; set; }

    protected override async Task OnInitializedAsync()
    {
        addressBooksProvider = async req =>
        {
            var nameFilter = String.IsNullOrEmpty(NameFilter) ? null : NameFilter;
            var mailFilter = String.IsNullOrEmpty(MailFilter) ? null : MailFilter;
            var sortByIdAscending = req.SortByAscending;

            Count = await addressBookService.CountAddressBooks(
                nameFilter: nameFilter,
                mailFilter: mailFilter
            );

            var addressBooks = await addressBookService.GetAddressBooks(
                nameFilter: nameFilter,
                mailFilter: mailFilter,
                skip: req.StartIndex, 
                limit: req.Count ?? 0,
                sortByIdAscending: sortByIdAscending);
            return GridItemsProviderResult.From(
                items: addressBooks.ToList(),
                totalItemCount: Count);
        };

        Count = await addressBookService.CountAddressBooks();
    }

    private async Task SearchAddressBooks() {
        await addressBooksDataGrid.RefreshDataAsync();
    }

    private async Task ClearFilter() {
        NameFilter = null;
        MailFilter = null;
        await SearchAddressBooks();
    }

    private async Task NewAddressBook() {
        DialogParameters parameters = new()
        {
            Title = $"登録",
            PrimaryAction = "登録",
            SecondaryAction = "キャンセル",
            Modal = true,
            PreventDismissOnOverlayClick = true, // true = ダイアログの外側をクリックしても閉じない
            TrapFocus = true, // true = ダイアログがフォーカスをトラップする（false にするとタブ移動でダイアログ外にまでフォーカスが移動する）
            ShowDismiss = false, // false = ヘッダーの閉じるボタンを非表示
            PreventScroll = true, // true = ダイアログの外側へのスクロールを防止
        };
        var dialog = await dialogService.ShowDialogAsync<AddressBookRegisterDialog>(new DialogData<AddressBook>(), parameters);
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }
        
        var addressBook = (result.Data as DialogData<AddressBook>)!.Value!;
        await addressBookService.AddAddressBook(addressBook);
        await SearchAddressBooks();
        ToastService.ShowToast(ToastIntent.Success, "登録しました", 3000);
    }

    private async Task UpdateAddressBook(AddressBook addressBook) 
    {
        // 最新の情報を取得
        var nowAddressBook = await addressBookService.GetAddressBook(addressBook.Id);
        if (nowAddressBook == null) {
            // 取得できなかった場合は既に削除されている
            ToastService.ShowToast(ToastIntent.Error, "対象のレコードが見つかりません。", 0);
            await SearchAddressBooks();
            return;
        }

        // 更新画面表示
        DialogParameters parameters = new()
        {
            Title = $"更新",
            PrimaryAction = "更新",
            SecondaryAction = "キャンセル",
            Modal = true,
            PreventDismissOnOverlayClick = true, // true = ダイアログの外側をクリックしても閉じない
            TrapFocus = true, // true = ダイアログがフォーカスをトラップする（false にするとタブ移動でダイアログ外にまでフォーカスが移動する）
            ShowDismiss = false, // false = ヘッダーの閉じるボタンを非表示
            PreventScroll = true, // true = ダイアログの外側へのスクロールを防止
        };
        var dialog = await dialogService.ShowDialogAsync<AddressBookUpdateDialog>(new DialogData<AddressBook>() { Value = nowAddressBook }, parameters);
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }
        
        // 更新内容をDBに反映
        var newAddressBook = (result.Data as DialogData<AddressBook>)!.Value!;
        await addressBookService.UpdateAddressBook(newAddressBook);
        await SearchAddressBooks();
        ToastService.ShowToast(ToastIntent.Success, "更新しました", 3000);
    }

    private async Task RemoveAddressBook(AddressBook addressBook) {

        var dialog = await dialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>()
           {
                Content = new()
                {
                    Title = "削除",
                    Message = $"{addressBook.Id} : {addressBook.Name} を削除します。よろしいですか？",
                    Icon = new Icons.Regular.Size24.Warning(),
                    IconColor = Color.Warning,
                },
                PrimaryAction = "はい",
                SecondaryAction = "いいえ",
                Modal = true, // ShowMessageBoxAsync だと効果が無い？
                PreventDismissOnOverlayClick = true, // true = ダイアログの外側をクリックしても閉じない
                TrapFocus = true, // true = ダイアログがフォーカスをトラップする（false にするとタブ移動でダイアログ外にまでフォーカスが移動する）
                ShowDismiss = false, // false = ヘッダーの閉じるボタンを非表示
                PreventScroll = true, // true = ダイアログの外側へのスクロールを防止
            });
        var result = await dialog.Result;
        if (result.Cancelled)
        {
            return;
        }

        var removed = await addressBookService.RemoveAddressBook(addressBook);
        await SearchAddressBooks();
        if (removed) {
            ToastService.ShowToast(ToastIntent.Success, "削除しました", 3000);
        } else {
            ToastService.ShowToast(ToastIntent.Error, "対象のレコードが見つかりません。", 0);
        }
    }
}
